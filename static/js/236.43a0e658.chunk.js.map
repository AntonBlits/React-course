{"version":3,"file":"static/js/236.43a0e658.chunk.js","mappings":"gMACA,GAAgB,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,YAAc,6BAA6B,MAAQ,uBAAuB,IAAM,sB,SCMvR,EAJgB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QAChB,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,K,UCUtC,EAVmB,SAAC,GAA0B,IAAxBG,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACvBC,EAAO,YAAcH,EAC3B,OACG,iBAAKF,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,WACG,gBAAKK,IAAKF,KACV,SAAC,KAAD,CAASG,GAAIF,EAAb,SAAoBF,Q,UCHvBK,EAAc,SAAC,GAAkB,IAAD,EAAfC,EAAe,EAAfA,SACpB,GAAiEC,EAAAA,EAAAA,IAAQ,CAAEC,KAAM,QAAzEC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MAAoBC,EAApD,EAAuCC,UAAaD,OAMpD,OAJAE,EAAAA,EAAAA,YAAU,WACPH,MACA,CAACL,KAGD,kBAAMA,SAAUI,EAAaJ,GAAWT,UAAWC,EAAAA,YAAnD,WACG,4BACG,6BAAUiB,YAAY,gBAAgBlB,UAAWe,EAAOI,gBAAkBlB,EAAAA,OAAaW,EAAS,iBAAkB,CAC/GQ,SAAU,4BACVC,UAAW,CACRC,MAAO,GACPvB,QAAS,0CAGR,OAANgB,QAAM,IAANA,OAAA,EAAAA,EAAQI,kBAAkB,gBAAKI,MAAO,CAAEC,MAAO,OAArB,mBAA+BT,EAAOI,sBAAtC,aAA+B,EAAuBpB,cAEpF,0BACG,mBAAQC,UAAWC,EAAAA,IAAnB,wBA+BZ,EAzBgB,SAAC,GAAmC,IAAjCwB,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAEzBC,EAAQF,EAERG,EAAaD,EAAME,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAA4B5B,KAAM4B,EAAO5B,KAAMD,GAAI6B,EAAO7B,GAAIE,OAAQ2B,EAAO3B,QAA5D2B,EAAO7B,OACjE8B,EAAcL,EAAMM,SAASH,KAAI,SAAA/B,GAAO,OAAI,SAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQG,OAMtE,OACG,iBAAKF,UAAWC,EAAAA,QAAhB,WACG,gBAAKD,UAAWC,EAAAA,YAAhB,SACI2B,KAEJ,iBAAK5B,UAAWC,EAAAA,SAAhB,UACI+B,GACD,SAACxB,EAAD,CAAaC,SAXL,SAACyB,GACfR,EAAaQ,EAAKf,0B,6BCnCpBgB,EAA0B,SAACR,GAAD,MAAY,CACvCS,OAAQT,EAAMU,KAAKD,SCctB,GAAeE,EAAAA,EAAAA,KACZC,EAAAA,EAAAA,KAfqB,SAACZ,GACtB,MAAO,CACJF,YAAaE,EAAMF,YACnBW,OAAQT,EAAMU,KAAKD,WAIE,SAACI,GACzB,MAAO,CACJd,aAAc,SAACP,GAAD,OAAoBqB,GAASC,EAAAA,EAAAA,GAAuBtB,UDLxC,SAACuB,GAgB9B,OADqCH,EAAAA,EAAAA,IAAQJ,EAARI,EAbX,SAACI,GACxB,OAAKA,EAAMP,QACJ,SAACM,GAAD,UAAeC,KADI,SAAC,KAAD,CAAUC,SAAO,EAACrC,GAAG,gBCOrD,CAGEsC","sources":["webpack://react-kabzda/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__iSI7a\",\"dialogItems\":\"Dialogs_dialogItems__TgpoZ\",\"dialog\":\"Dialogs_dialog__mJnH4\",\"messages\":\"Dialogs_messages__-ErC2\",\"message\":\"Dialogs_message__2UTaJ\",\"addMessages\":\"Dialogs_addMessages__kgPo7\",\"error\":\"Dialogs_error__GfCzJ\",\"btn\":\"Dialogs_btn__-NNZs\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = ({ message }) => {\r\n   return <div className={s.message}>{message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem = ({ id, name, avatar }) => {\r\n   const path = '/dialogs/' + id;\r\n   return (\r\n      <div className={s.dialog + ' ' + s.active}>\r\n         <img src={avatar} />\r\n         <NavLink to={path}>{name}</NavLink>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default DialogItem;","import React, { useEffect } from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst DialogsForm = ({ onSubmit }) => {\r\n   const { register, handleSubmit, reset, formState: { errors } } = useForm({ mode: 'all' });\r\n\r\n   useEffect(() => {\r\n      reset()\r\n   }, [onSubmit]);\r\n\r\n   return (\r\n      <form onSubmit={handleSubmit(onSubmit)} className={s.addMessages} >\r\n         <div>\r\n            <textarea placeholder='Enter message' className={errors.newMessageText && s.error} {...register(\"newMessageText\", {\r\n               required: 'Your textarea is required',\r\n               maxLength: {\r\n                  value: 10,\r\n                  message: 'Your textarea exceed maxLength 10'\r\n               }\r\n            })} />\r\n            {errors?.newMessageText && <div style={{ color: 'red' }}>{errors.newMessageText?.message}</div>}\r\n         </div>\r\n         <div>\r\n            <button className={s.btn}>Send</button>\r\n         </div>\r\n      </form>\r\n   )\r\n}\r\n\r\nconst Dialogs = ({ dialogsPage, onAddMessage }) => {\r\n\r\n   let state = dialogsPage;\r\n\r\n   let dialogItem = state.dialogs.map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id} avatar={dialog.avatar} />);\r\n   let messageItem = state.messages.map(message => <Message key={message.id} message={message.message} />);\r\n\r\n   let addMessage = (data) => {\r\n      onAddMessage(data.newMessageText);\r\n   }\r\n\r\n   return (\r\n      <div className={s.dialogs}>\r\n         <div className={s.dialogItems}>\r\n            {dialogItem}\r\n         </div>\r\n         <div className={s.messages}>\r\n            {messageItem}\r\n            <DialogsForm onSubmit={addMessage} />\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate, Redirect } from 'react-router-dom';\r\n\r\n\r\nlet mapStateToPropsRedirect = (state) => ({\r\n   isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n   const RedirectComponent = (props) => {\r\n      if (!props.isAuth) return <Navigate replase to='/login' />\r\n      return <Component {...props} />\r\n\r\n   }\r\n\r\n   // class RedirectComponent extends React.Component {\r\n   //    render() {\r\n   //       // if (!this.props.isAuth) return <Redirect to='/login' />\r\n   //       if (!this.props.isAuth) return <Navigate replase to='/login' />\r\n   //       return <Component {...this.props} />\r\n   //    }\r\n   // }\r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent);\r\n   return ConnectedAuthRedirectComponent;\r\n}\r\n","import { addMessageActionCreate } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n      dialogsPage: state.dialogsPage,\r\n      isAuth: state.auth.isAuth,\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n      onAddMessage: (newMessageText) => dispatch(addMessageActionCreate(newMessageText)),\r\n\r\n   }\r\n}\r\n\r\nexport default compose(\r\n   connect(mapStateToProps, mapDispatchToProps),\r\n   withAuthRedirect\r\n)(Dialogs)"],"names":["message","className","s","id","name","avatar","path","src","to","DialogsForm","onSubmit","useForm","mode","register","handleSubmit","reset","errors","formState","useEffect","placeholder","newMessageText","required","maxLength","value","style","color","dialogsPage","onAddMessage","state","dialogItem","dialogs","map","dialog","messageItem","messages","data","mapStateToPropsRedirect","isAuth","auth","compose","connect","dispatch","addMessageActionCreate","Component","props","replase","Dialogs"],"sourceRoot":""}